---
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-types";

const id = Astro.params.id;
const svg: SvgRecord = await pb.collection(Collections.Save).getOne(id);

let history=[];
try{
     history = JSON.parse(svg?.chat_history || "[]");
} catch (e) {
    history=[];
}


---


<Layout>

    <div 
    class="max-w-full max-h-full" 
    set:html={svg.code_svg}/>

    <div id="chat-history" class="flex flex-col gap-4 w-full mb-20 overflow-y-auto flex-grow">
    {
        (Array.isArray(history) && history.length > 0) ? (
            history.map((msg: { role: string; content: string; }) => (
                <div class={`chat ${msg.role === 'user' ? 'chat-start' : 'chat-end'}`}>
                    <div class={`chat-bubble ${msg.role === 'user' ? 'bg-primary text-primary-content' : 'bg-secondary text-secondary-content'}`}>
                        <pre>{msg.content}</pre>
                    </div>
                    <div class="chat-footer opacity-60 text-xs mt-1">{msg.role}</div>
                </div>
            ))
        ) : (
            <span class="text-error">Aucun historique de chat.</span>
        )
    }
</div>

<form id="input-prompt-form" class="flex flex-col gap-2 w-full absolute bottom-0 left-0 right-0 bg-base-300 p-4" method="POST" autocomplete="off" >
    <input type="hidden" name="history" value={JSON.stringify(svg?.chat_history)} />
    <input type="hidden" name="id" value={svg?.id} />
    <div class="flex items-center gap-2">
        <input id="prompt-input" name="editPrompt" type="text" class="input flex-grow" placeholder="Enter a prompt to edit the SVG..." />
        <button class="btn btn-primary" type="submit">Edit</button>
    </div>
</form>

<script>
    //@ts-nocheck
    const form = document.getElementById('input-prompt-form');
    const svgPreview = document.querySelector('.max-w-full.max-h-full');
    const chatHistory = document.getElementById('chat-history');

    // Fonction pour générer le SVG à partir du prompt
    async function generateSVG(prompt) {
        // TODO: Implement actual SVG generation logic
        return "Generated SVG response";
    }

    // Écouteur d'événement pour le formulaire de soumission
    form?.addEventListener('submit', async (e) => {
        e.preventDefault(); // Empêche le rechargement de la page
        const formData = new FormData(form);
        console.log(JSON.stringify(Object.fromEntries(formData)));

        // Créez un objet pour le prompt de l'utilisateur
        let prompt = {
            role: 'user',
            content: formData.get('editPrompt')
        };

        // Récupérez l'historique des messages
        let history = JSON.parse(formData.get('history') || "[]");
        if (!Array.isArray(history)) {
            history = [];
        }
        history.push(prompt); // Ajoutez le nouveau prompt à l'historique

        // Réinitialisez le champ de saisie
        document.getElementById('prompt-input').value = '';

        // Affichez un indicateur de chargement
        svgPreview.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
        
        // Ajoutez le prompt à l'historique du chat
        chatHistory.innerHTML += `<div class="chat chat-start">
            <div class="chat-bubble bg-primary text-primary-content">
                <pre>${prompt.content}</pre>
            </div>
            <div class="chat-footer opacity-60 text-xs mt-1">user</div>
        </div>`;

        // Appelez la fonction pour générer le SVG
        let aiResponse = await generateSVG(prompt);
        history.push({ role: 'assistant', content: aiResponse }); // Ajoutez la réponse de l'IA à l'historique

        // Extraire le SVG de la réponse
        const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse = svgMatch ? svgMatch[0] : "";

        console.log("svgCode: ", aiResponse);
         // Mettez à jour l'affichage du SVG
        svgPreview.innerHTML = aiResponse;

        // Ajoutez le code SVG à l'historique du chat
        chatHistory.innerHTML += `<div class="chat chat-end">
            <div class="chat-bubble bg-secondary text-secondary-content">
                <pre>${aiResponse}</pre>
            </div>
            <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
        </div>`;

        form.reset(); // Réinitialisez le formulaire
    });
</script>
</Layout>