---
///@ts-nocheck
import Layout from '../../layouts/Layout.astro';
import pb from '../../utils/pb';
import { Collections } from '../../utils/pocketbase-types';
import { ui } from "../../i18n/ui.js";

const locale = Astro.locals.lang as 'en' | 'fr' ?? 'en';
const user = Astro.locals.user; // Récupère l'utilisateur connecté

console.log('Locale in gallery:', locale);
console.log('User in gallery:', user);

// Récupération des SVGs de l'utilisateur connecté uniquement
let svgRecords = [];
try {
    if (user && user.id) {
        svgRecords = await pb
            .collection(Collections.Save)
            .getFullList({
                sort: "-created", // Trie du plus récent au plus ancien
                filter: `user = "${user.id}"`, // Filtre pour l'utilisateur connecté
            });
        console.log('SVG records loaded for user:', svgRecords.length);
    }
} catch (error) {
    console.error('Erreur lors du chargement des SVGs:', error);
}
---

<Layout>
    <div class="container mx-auto p-6">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-primary mb-2">{ui[locale].gallery.title}</h1>
            <p class="text-lg text-base-content/70">{ui[locale].gallery.subtitle}</p>
            <div class="divider"></div>
        </div>

        <!-- Stats -->
        <div class="stats shadow mb-6 w-full">
            <div class="stat place-items-center">
                <div class="stat-title">{ui[locale].gallery.stattitle}</div>
                <div class="stat-value text-primary">{svgRecords.length}</div>
                <div class="stat-desc">{ui[locale].gallery.statdesc}</div>
            </div>
        </div>

        <!-- Gallery Grid -->
        {svgRecords.length > 0 ? (
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {svgRecords.map((record) => (
                    <div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300">
                        <!-- SVG Preview -->
                        <figure class="px-4 pt-4">
                            <div class="w-full h-48 bg-base-200 rounded-lg flex items-center justify-center overflow-hidden">
                                <div 
                                    class="max-w-full max-h-full" 
                                    set:html={record.code_svg}
                                />
                            </div>
                        </figure>
                        
                        <!-- Card Body -->
                        <div class="card-body">
                            <h2 class="card-title text-base">
                                {record.name || 'SVG sans nom'}
                                <div class="badge badge-secondary badge-sm">SVG</div>
                            </h2>
                            
                            <!-- Metadata -->
                            <div class="text-xs text-base-content/60 space-y-1">
                                <a class="link link-primary" href={`/gallery/${record.id}`}>{ui[locale].gallery.viewDetails}</a>
                                <p>{ui[locale].gallery.created}: {new Date(record.created).toLocaleDateString('fr-FR')}</p>
                                <p>ID: {record.id.substring(0, 8)}...</p>
                            </div>
                            
                            <!-- Actions -->
                            <div class="card-actions justify-end mt-4">
                                <button 
                                    class="btn btn-sm btn-outline btn-primary view-btn"
                                    data-svg-code={record.code_svg}
                                    data-svg-name={record.name || 'SVG sans nom'}
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                    {ui[locale].gallery.view}
                                </button>
                                <button 
                                    class="btn btn-sm btn-outline btn-success download-btn"
                                    data-svg-code={record.code_svg}
                                    data-svg-name={record.name || 'svg'}
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                                    </svg>
                                    {ui[locale].gallery.download}
                                </button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        ) : (
            <!-- Empty State -->
            <div class="hero min-h-96">
                <div class="hero-content text-center">
                    <div class="max-w-md">
                        <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-24 w-24 text-base-content/30 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h4a1 1 0 110 2h-1v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6H3a1 1 0 110-2h4zM9 3v1h6V3H9zm0 5v8h2V8H9zm4 0v8h2V8h-2z" />
                        </svg>
                        <h3 class="text-2xl font-bold text-base-content/70">{ui[locale].gallery.emptyStateTitle}</h3>
                        <p class="py-4 text-base-content/50">{ui[locale].gallery.emptyStateDescription}</p>
                        <a href="/generate" class="btn btn-primary">
                            {ui[locale].gallery.emptyStateButton}
                        </a>
                    </div>
                </div>
            </div>
        )}

        <!-- Back to Generator -->
        <div class="text-center mt-8">
            <a href="/generate" class="btn btn-outline btn-primary">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                {ui[locale].gallery.createNew}
            </a>
        </div>
    </div>

    <!-- Modal pour voir le SVG en grand -->
    <dialog id="svg_modal" class="modal">
        <div class="modal-box w-11/12 max-w-4xl">
            <h3 id="modal-title" class="font-bold text-lg mb-4">{ui[locale].gallery.preview}</h3>
            <div id="modal-svg-container" class="flex items-center justify-center min-h-96 bg-base-200 rounded-lg p-4">
                <!-- Le SVG sera injecté ici -->
            </div>
            <div class="modal-action">
                <button id="modal-download" class="btn btn-success">{ui[locale].gallery.download}</button>
                <form method="dialog">
                    <button class="btn">{ui[locale].gallery.close}</button>
                </form>
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>
</Layout>

<script>
    // Fonction pour télécharger un SVG
    function downloadSVG(svgCode: string, fileName: string) {
        const blob = new Blob([svgCode], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${fileName}.svg`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // Gestion des boutons "Voir"
    document.addEventListener('DOMContentLoaded', () => {
        const viewButtons = document.querySelectorAll('.view-btn');
        const modal = document.getElementById('svg_modal') as HTMLDialogElement;
        const modalTitle = document.getElementById('modal-title');
        const modalContainer = document.getElementById('modal-svg-container');
        const modalDownload = document.getElementById('modal-download');
        
        let currentSvgCode = '';
        let currentSvgName = '';

        viewButtons.forEach(button => {
            button.addEventListener('click', () => {
                const svgCode = button.getAttribute('data-svg-code') || '';
                const svgName = button.getAttribute('data-svg-name') || 'SVG';
                
                currentSvgCode = svgCode;
                currentSvgName = svgName;
                
                if (modalTitle) modalTitle.textContent = svgName;
                if (modalContainer) modalContainer.innerHTML = svgCode;
                
                modal?.showModal();
            });
        });

        // Gestion du téléchargement depuis la modal
        modalDownload?.addEventListener('click', () => {
            if (currentSvgCode && currentSvgName) {
                downloadSVG(currentSvgCode, currentSvgName);
            }
        });

        // Gestion des boutons "Télécharger" directs
        const downloadButtons = document.querySelectorAll('.download-btn');
        downloadButtons.forEach(button => {
            button.addEventListener('click', () => {
                const svgCode = button.getAttribute('data-svg-code') || '';
                const svgName = button.getAttribute('data-svg-name') || 'svg';
                downloadSVG(svgCode, svgName);
            });
        });
    });
</script>

<style>
    /* Animation pour les cartes */
    .card {
        transition: all 0.3s ease;
    }
    
    .card:hover {
        transform: translateY(-5px);
    }

    /* Style pour les SVGs dans la grille */
    .card figure svg {
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
    }

    /* Style pour les SVGs dans la modal */
    #modal-svg-container svg {
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
    }
</style>