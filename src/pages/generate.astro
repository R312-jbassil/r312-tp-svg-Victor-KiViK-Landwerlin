---
import Layout from '../layouts/Layout.astro';
import { ui } from "../i18n/ui.js";

const locale = Astro.locals.lang as 'en' | 'fr' ?? 'en';
const user = Astro.locals.user;
console.log('Locale in generate:', locale);
console.log('User in generate:', user);
---

<Layout>
    <div class="container mx-auto p-6 space-y-6">
        <!-- Input section -->
        <div class="flex gap-4 items-center justify-center">
            <input 
                id="user-prompt" 
                type="text" 
                placeholder={ui[locale].generator.promptLabel} 
                class="input input-bordered input-lg flex-1 max-w-md focus:input-primary" 
            />
            <button 
                id="generate-button" 
                class="btn btn-soft btn-primary btn-lg"
            >
                {ui[locale].generator.generateButton}
            </button>
            <button 
                id="edit-button" 
                class="btn btn-soft btn-secondary btn-lg"
            >
                {ui[locale].generator.editButton}
            </button>
            <button
                id="save-button"
                class="btn btn-soft btn-success btn-lg">
                {ui[locale].generator.saveButton}
            </button>
        </div>

        <!-- Output section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- SVG Preview -->
            <div class="card bg-base-100 shadow-xl">
                <div class="card-header bg-base-200 px-4 py-2">
                    <h3 class="text-lg font-semibold">{ui[locale].generator.svgpreview}</h3>
                </div>
                <div class="card-body">
                    <div 
                        id="svg-container" 
                        class="min-h-64 border-2 border-dashed border-base-300 rounded-lg flex items-center justify-center bg-base-50"
                    >
                        <span class="text-base-content/50">{ui[locale].generator.contentPlaceholder}</span>
                    </div>
                </div>
            </div>

            <!-- SVG Code -->
            <div class="card bg-base-100 shadow-xl">
                <div class="card-header bg-base-200 px-4 py-2">
                    <h3 class="text-lg font-semibold">{ui[locale].generator.svgcode}</h3>
                </div>
                <div class="card-body">
                    <pre 
                        id="svg-output" 
                        class="bg-base-200 p-4 rounded-lg overflow-auto min-h-64 text-sm"
                    >{ui[locale].generator.codePlaceholder}</pre>
                </div>
            </div>
        </div>
    </div>
</Layout>

<script>
    //@ts-nocheck
    
    async function generateSVG(prompt) {
        console.log('Generating SVG for prompt:', prompt);
        try {
            const res = await fetch('/api/generateSVG', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(prompt),
            });
            
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            
            const data = await res.json();
            return data.svg;
        } catch (error) {
            console.error('Error generating SVG:', error);
            return '<svg><text x="10" y="20" fill="red">Error generating SVG</text></svg>';
        }
    }

    let promptList = [];

    async function handleSubmit() {
        const generateButton = document.getElementById("generate-button");
        const editButton = document.getElementById("edit-button");
        let prompt = "";
        const promptElement = document.getElementById("user-prompt");
        prompt = promptElement ? promptElement.value : "";
        console.log("submitted: ", prompt);
        
        promptList.length = 0; 
        promptList.push({ role: "user", content: prompt });
        const svgContainer = document.getElementById("svg-container");
        
        svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
        generateButton.disabled = true;
        editButton.disabled = true;
        
        let svgOutput = document.getElementById("svg-output");
        let aiResponse = await generateSVG(promptList);
        
        const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("svgCode: ", aiResponse.content);
        
        promptList.push(aiResponse);
        svgOutput.textContent = aiResponse.content;
        svgContainer.innerHTML = aiResponse.content;
        
        generateButton.disabled = false;
        editButton.disabled = false;
    }

    async function handleEdit() {
        const generateButton = document.getElementById("generate-button");
        const editButton = document.getElementById("edit-button");
        let prompt = "";
        const promptElement = document.getElementById("user-prompt");
        prompt = promptElement ? promptElement.value : "";
        console.log("Prompt soumis : ", prompt);
        
        promptList.push({ role: "user", content: prompt });
        const svgContainer = document.getElementById("svg-container");
        
        svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
        generateButton.disabled = true;
        editButton.disabled = true;
        
        let svgOutput = document.getElementById("svg-output");
        let aiResponse = await generateSVG(promptList);
        
        const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("Code SVG généré : ", aiResponse.content);
        
        promptList.push(aiResponse);
        svgOutput.textContent = aiResponse.content;
        svgContainer.innerHTML = aiResponse.content;
        
        generateButton.disabled = false;
        editButton.disabled = false;
        console.log("Historique des prompts : ", promptList);
    }

    const editButton = document.getElementById("edit-button");
    if (editButton) {
        editButton.addEventListener("click", handleEdit);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const generateButton = document.getElementById("generate-button");
        const promptElement = document.getElementById("user-prompt");
        
        if (generateButton) {
            generateButton.addEventListener("click", handleSubmit);
        }
        
        if (promptElement) {
            promptElement.addEventListener("keypress", (e) => {
                if (e.key === 'Enter') {
                    handleSubmit();
                }
            });
        }
    });

    // Fonction de sauvegarde du SVG avec user ID
    const saveButton = document.getElementById("save-button");

    async function saveSVG(params) {
        const res = await fetch("/api/saveSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(params),
        });
        return await res.json();
    }

    if (saveButton) {
        saveButton.addEventListener("click", async () => {
            // Récupérer l'utilisateur du localStorage
            const user = JSON.parse(localStorage.getItem("user"));
            
            if (!user || !user.id) {
                alert("Erreur: utilisateur non connecté");
                return;
            }

            const name = prompt("Donnez un nom à votre création :");
            if (!name) return;
            
            const svgOutput = document.getElementById("svg-output")?.textContent;
            console.log("Préparation de la sauvegarde :", JSON.stringify(svgOutput));
            
            const params = {
                name,
                code_svg: svgOutput || "<svg></svg>",
                chat_history: JSON.stringify(promptList),
                user: user.id // Ajout de l'ID utilisateur
            };
            
            const result = await saveSVG(params);
            if (result.success) {
                alert("SVG sauvegardé avec succès !");
                window.location.href = "/gallery";
            } else {
                alert("Erreur lors de la sauvegarde : " + result.error);
            }
        });
    }
</script>